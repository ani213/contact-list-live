{"ast":null,"code":"import _objectSpread from \"/home/aniket/Desktop/New_Projects/contact_list/contact_list/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport const initialState = {\n  contacts: [],\n  addContactYN: false,\n  error: \"\",\n  success: false,\n  editContact: {\n    id: \"\",\n    YN: false\n  },\n  editDetails: null\n};\nexport const SET_CONTACTS = \"SET_CONTACTS\";\nexport const HANDLE_ADD_CONTACT_FORM = \"HANDLE_ADD_CONTACT_FORM\";\nexport const ADD_CONTACT = \"ADD_CONTACT\";\nexport const CLEAR_ERROR = \"CLEAR_ERROR\";\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\nexport const CLEAR_SUCCESS = 'CLEAR_SUCCESS';\nexport const SHOW_EDIT_FORM = \"SHOW_EDIT_FORM\";\nexport const EDIT_DETAILS_CHANGE = \"EDIT_DETAILS_CHANGE\";\nexport const EDIT_DETAILS = \"EDIT_DETAILS\";\nexport const SORTING = 'SORTING';\nexport const setContacts = contacts => dispatch => {\n  dispatch({\n    type: SET_CONTACTS,\n    payload: contacts\n  });\n};\nexport const handleAddContactForm = showOrHide => dispatch => {\n  dispatch({\n    type: HANDLE_ADD_CONTACT_FORM,\n    payload: showOrHide\n  });\n};\nexport const addContact = contactDetails => dispatch => {\n  dispatch({\n    type: ADD_CONTACT,\n    payload: contactDetails\n  });\n};\nexport const clearError = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERROR\n  });\n};\nexport const clearSuccess = () => dispatch => {\n  dispatch({\n    type: CLEAR_SUCCESS\n  });\n};\nexport const deleteContact = id => dispatch => {\n  dispatch({\n    type: DELETE_CONTACT,\n    payload: id\n  });\n};\nexport const showEditForm = data => dispatch => {\n  dispatch({\n    type: SHOW_EDIT_FORM,\n    payload: data\n  });\n};\nexport const editDetailsChange = (name, value) => dispatch => {\n  dispatch({\n    type: EDIT_DETAILS_CHANGE,\n    payload: {\n      name: name,\n      value: value\n    }\n  });\n};\nexport const editDetails = data => dispatch => {\n  dispatch({\n    type: EDIT_DETAILS,\n    payload: data\n  });\n};\nexport const sortingBy = data => dispatch => {\n  dispatch({\n    type: SORTING,\n    payload: data\n  });\n};\nexport const _validateDetail = (arr, details) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (!details[arr[i]]) {\n      return arr[i];\n    }\n  }\n\n  return \"ALLOK\";\n};\nexport default function contactReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_CONTACTS:\n      return _objectSpread({}, state, {\n        contacts: payload\n      });\n\n    case HANDLE_ADD_CONTACT_FORM:\n      return _objectSpread({}, state, {\n        addContactYN: payload\n      });\n\n    case ADD_CONTACT:\n      let oldContacts = state.contacts; //  console.log(payload)\n\n      let arr = [\"firstName\", \"lastName\", \"email\", \"phone\"];\n\n      let data = _validateDetail(arr, payload);\n\n      console.log(data, \"data\");\n\n      if (data == \"ALLOK\") {\n        let details = {\n          id: oldContacts[oldContacts.length - 1].id + 1,\n          first_name: payload.firstName,\n          last_name: payload.lastName,\n          email: payload.email,\n          avatar_url: `https://robohash.org/${payload.firstName}?size=100x100&set=set1`,\n          phone: payload.phone\n        };\n        oldContacts.push(details); // console.log(oldContacts)\n\n        localStorage.setItem(\"contact\", JSON.stringify(oldContacts));\n        return _objectSpread({}, state, {\n          contacts: oldContacts,\n          success: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          error: `${data} is required but missing`\n        });\n      }\n\n    case DELETE_CONTACT:\n      let newContact = state.contacts.filter(ele => {\n        if (ele.id != payload) {\n          return ele;\n        }\n      });\n      localStorage.setItem(\"contact\", JSON.stringify(newContact));\n      return _objectSpread({}, state, {\n        contacts: newContact\n      });\n\n    case CLEAR_ERROR:\n      return _objectSpread({}, state, {\n        error: \"\"\n      });\n\n    case CLEAR_SUCCESS:\n      return _objectSpread({}, state, {\n        success: false\n      });\n\n    case SHOW_EDIT_FORM:\n      // console.log(\"payload\",payload)\n      return _objectSpread({}, state, {\n        editContact: {\n          id: payload.id,\n          YN: payload.YN\n        },\n        editDetails: payload\n      });\n\n    case EDIT_DETAILS_CHANGE:\n      return _objectSpread({}, state, {\n        editDetails: _objectSpread({}, state.editDetails, {\n          [payload.name]: payload.value\n        })\n      });\n\n    case EDIT_DETAILS:\n      let array = [\"first_name\", \"last_name\", \"email\", \"phone\"];\n\n      let result = _validateDetail(array, payload);\n\n      if (result == 'ALLOK') {\n        let contactDetails = state.contacts.map(ele => {\n          if (ele.id == payload.id) {\n            return {\n              ['id']: payload.id,\n              ['first_name']: payload.first_name,\n              ['last_name']: payload.last_name,\n              ['email']: payload.email,\n              ['phone']: payload.phone,\n              ['avatar_url']: `https://robohash.org/${payload.first_name}?size=100x100&set=set1`\n            };\n          } else return ele;\n        });\n        localStorage.setItem(\"contact\", JSON.stringify(contactDetails));\n        return _objectSpread({}, state, {\n          contacts: contactDetails,\n          success: true\n        });\n      } else {\n        return _objectSpread({}, state, {\n          error: `${result} should not be empty`\n        });\n      }\n\n    case SORTING:\n      let contactsData = state.contacts.sort((a, b) => a.payload > b.payload ? 1 : b.payload > a.payload ? -1 : 0);\n      console.log(contactsData);\n      return _objectSpread({}, state, {\n        contacts: contactsData\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/aniket/Desktop/New_Projects/contact_list/contact_list/src/Component/contactState.js"],"names":["initialState","contacts","addContactYN","error","success","editContact","id","YN","editDetails","SET_CONTACTS","HANDLE_ADD_CONTACT_FORM","ADD_CONTACT","CLEAR_ERROR","DELETE_CONTACT","CLEAR_SUCCESS","SHOW_EDIT_FORM","EDIT_DETAILS_CHANGE","EDIT_DETAILS","SORTING","setContacts","dispatch","type","payload","handleAddContactForm","showOrHide","addContact","contactDetails","clearError","clearSuccess","deleteContact","showEditForm","data","editDetailsChange","name","value","sortingBy","_validateDetail","arr","details","i","length","contactReducer","state","oldContacts","console","log","first_name","firstName","last_name","lastName","email","avatar_url","phone","push","localStorage","setItem","JSON","stringify","newContact","filter","ele","array","result","map","contactsData","sort","a","b"],"mappings":"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","sourcesContent":["\nexport const initialState={\n     contacts:[],\n     addContactYN:false,\n     error:\"\",\n     success:false,\n     editContact:{id:\"\",YN:false},\n     editDetails:null\n}\nexport const SET_CONTACTS=\"SET_CONTACTS\";\nexport const HANDLE_ADD_CONTACT_FORM=\"HANDLE_ADD_CONTACT_FORM\";\nexport const ADD_CONTACT=\"ADD_CONTACT\";\nexport const CLEAR_ERROR=\"CLEAR_ERROR\";\nexport const DELETE_CONTACT='DELETE_CONTACT';\nexport const CLEAR_SUCCESS='CLEAR_SUCCESS';\nexport const SHOW_EDIT_FORM=\"SHOW_EDIT_FORM\";\nexport const EDIT_DETAILS_CHANGE=\"EDIT_DETAILS_CHANGE\";\nexport const EDIT_DETAILS=\"EDIT_DETAILS\";\nexport const SORTING='SORTING';\n\nexport const setContacts=(contacts)=>dispatch=>{\ndispatch({\n    type:SET_CONTACTS,\n    payload:contacts\n})\n}\nexport const handleAddContactForm=(showOrHide)=>dispatch=>{\ndispatch({\n    type:HANDLE_ADD_CONTACT_FORM,\n    payload:showOrHide\n})\n}\nexport const addContact=(contactDetails)=>dispatch=>{\n    dispatch({\n        type:ADD_CONTACT,\n        payload:contactDetails\n    })\n}\nexport const clearError=()=>dispatch=>{\n    dispatch({\n        type:CLEAR_ERROR\n    })\n}\nexport const clearSuccess=()=>dispatch=>{\n    dispatch({\n        type:CLEAR_SUCCESS\n    })\n}\nexport const deleteContact=(id)=>dispatch=>{\ndispatch({\n    type:DELETE_CONTACT,\n    payload:id,\n})\n}\nexport const showEditForm=(data)=>dispatch=>{\n    dispatch({\n        type:SHOW_EDIT_FORM,\n        payload:data,\n    })\n}\nexport const editDetailsChange=(name,value)=>dispatch=>{\ndispatch({\n        type:EDIT_DETAILS_CHANGE,\n        payload:{name:name,value:value}\n})\n}\nexport const editDetails=(data)=>dispatch=>{\n    dispatch({\n        type:EDIT_DETAILS,\n        payload:data,\n    })\n}\n\nexport const sortingBy=(data)=>dispatch=>{\n    dispatch({\n        type:SORTING,\n        payload:data\n    })\n}\n\nexport const _validateDetail=(arr,details)=>{\n         for(let i=0;i<arr.length;i++){\n             if(!details[arr[i]]){\n                 return arr[i];\n             }\n         }\n         return \"ALLOK\"\n}\n\n\nexport default function contactReducer(state=initialState,{type,payload}){\n    switch(type){\n        case SET_CONTACTS:\n            return{\n                ...state,\n                contacts:payload\n            }\n        case HANDLE_ADD_CONTACT_FORM:\n            return{\n                ...state,\n                addContactYN:payload\n            }  \n        case ADD_CONTACT:\n            let oldContacts=state.contacts;\n            //  console.log(payload)\n             let arr=[\"firstName\",\"lastName\",\"email\",\"phone\"];\n            let data= _validateDetail(arr,payload)\n            console.log(data,\"data\")\n                 if(data==\"ALLOK\"){\n                    let details={\n                        id:oldContacts[oldContacts.length-1].id+1,\n                        first_name:payload.firstName,\n                        last_name:payload.lastName,\n                        email:payload.email,\n                        avatar_url:`https://robohash.org/${payload.firstName}?size=100x100&set=set1`,\n                        phone:payload.phone,\n                    } \n                    oldContacts.push(details);\n                    // console.log(oldContacts)\n                   localStorage.setItem(\"contact\", JSON.stringify(oldContacts))\n                   return{\n                       ...state,\n                       contacts:oldContacts,\n                       success:true,\n                   }\n                } \n                   else{\n                       return{\n                           ...state,\n                           error:`${data} is required but missing`\n                       }\n                   }     \n         \n        case DELETE_CONTACT:\n            let newContact=state.contacts.filter((ele)=>{\n                if(ele.id!=payload)\n                {\n                    return ele;\n                }\n            }) \n            localStorage.setItem(\"contact\", JSON.stringify(newContact))\n            return{\n                ...state,\n                contacts:newContact\n            }\n        case CLEAR_ERROR:\n            return{\n                ...state,\n                error:\"\"\n            }    \n        case CLEAR_SUCCESS:\n            return{\n                ...state,\n                success:false\n            }\n        case SHOW_EDIT_FORM:\n            // console.log(\"payload\",payload)\n            return{\n                ...state,\n                editContact:{id:payload.id,YN:payload.YN},\n                editDetails:payload\n            } \n        case EDIT_DETAILS_CHANGE:\n           return {\n              ...state,\n              editDetails:{...state.editDetails,[payload.name]:payload.value}\n            }   \n        case EDIT_DETAILS:\n                let array=[\"first_name\",\"last_name\",\"email\",\"phone\"];\n                let result=_validateDetail(array,payload)\n                if(result=='ALLOK'){\n            let contactDetails=state.contacts.map((ele)=>{\n                if(ele.id==payload.id){\n                    return{\n                        ['id']:payload.id,\n                        ['first_name']:payload.first_name,\n                        ['last_name']:payload.last_name,\n                        ['email']:payload.email,\n                        ['phone']:payload.phone,\n                        ['avatar_url']:`https://robohash.org/${payload.first_name}?size=100x100&set=set1`,\n                    }\n                }\n                else\n                  return ele;\n            })\n            localStorage.setItem(\"contact\", JSON.stringify(contactDetails)) \n        \n            return{\n                ...state,\n                contacts:contactDetails,\n                success:true,\n            }   \n             }else{\n                 return{\n                     ...state,\n                      error:`${result} should not be empty`\n                    }\n        }\n        case SORTING:\n            let contactsData=state.contacts.sort((a,b)=>(a.payload > b.payload) ? 1 : ((b.payload > a.payload) ? -1 : 0))\n            console.log(contactsData)\n            return{\n                ...state,\n                contacts:contactsData\n            }\n        default:\n            return state\n    }\n\n}"]},"metadata":{},"sourceType":"module"}